# ABCIT algorithm 6: adaptive MVDR
# chAlgo = [1,2,5,6];
nchannels_in = 4
srate = 16000
fragsize = 160

mhalib = mhachain
iolib=MHAIOFile

#do the processing for fixed beamforming + postfiltering
#make this a simpler version of the beamforming
#use_profiling = yes

#the main processing chain has the following steps:
#1. save_wave: save the input for the recall of reference signals
#2. route: make full copies of input signal to be filtered in parallel
#3. spBF: apply FIR filters to each channel (for beamforming), passing refs.
#4. spMix: sum the fixed beamforming channels, perform blocking for GSC
#5. bfBlock: save the beamformed and blocked outputs
#6. chVAD: implement VAD using timoSmooth to compute SPP, convert to VAD
#7. chAF: adaptive filtering, on right and left in sequence 
#8. oaPF: postfiltering using timoSmooth and common/indiv postfilter
mha.algos = [route:copyInput split:spBF split:spMix save_wave:bfBlock route:preAF split:spAF]

#copy the inputs: [bfL] [bfR] [bfBlock]
mha.copyInput.out = [:0 :1 :2 :3 :0 :1 :2 :3 :0 :1 :2 :3]

#do not filter the blocking channels, for now
mha.spBF.algos = [fftfilter:filterBF identity]
mha.spBF.channels = [8 4]
mha.spBF.thread_platform = dummy

#process copied channels with filters
#read in BF coefficients from separate file
#filterBF?read:abcit/bf_coeffs2.cfg
mha.spBF.filterBF?read:${MHA_CFG_DIR}/bf_coeffs8b.cfg

#separate mixers for:
#a) fixed beamformer-summing and b) blocking for adaptive filter
mha.spMix.algos = [matrixmixer:mixBF matrixmixer:mixBlock]
mha.spMix.channels = [8 4]

mha.spMix.mixBF.m = [[1 1 1 1 0 0 0 0]; [0 0 0 0 1 1 1 1]] #BF sum
#spMix.mixBlock.m = [[1 -1 0 0]; [1 0 -1 0]; [1 0 0 -1]] #blocking
mha.spMix.mixBlock.m = [[1 -1 0 0]; [0 0 1 -1]] #left-right blocking only

#what comes out of spMix, and is saved in bfBlock
#2x[summed fixed BF] 3x[blocking]
#2x[summed fixed BF] 2x[blocking]

#timoSmooth produces noise-reduced blocked signals, that we don't want
#so for the next step we need to reload the blocked signals

mha.preAF.out = [:2 :3 :0 :2 :3 :1]

mha.spAF.algos = [gsc_adaptive_stage:filtL gsc_adaptive_stage:filtR]
mha.spAF.channels = [3 3]

#do the adaptive filtering
#mha.chAF.algos = [route:prepL gsc_adaptive_stage:filtL save_wave:leftAF route:prepR gsc_adaptive_stage:filtR route:useAF]

#mha.prepL.out = [bfBlock:2 bfBlock:3 bfBlock:0] #blocking plus left
mha.spAF.filtL?read:${MHA_CFG_DIR}/adaptiveFilterSettings.cfg
mha.spAF.filtL.useVAD = no #do not use the VAD

#mha.prepR.out = [bfBlock:2 bfBlock:3 bfBlock:1] #blocking plus right
mha.spAF.filtR?read:${MHA_CFG_DIR}/adaptiveFilterSettings.cfg
mha.spAF.filtR.useVAD = no #do not use the VAD


#[refs] [leftAF] [rightAF]
#mha.chAF.useAF.out = [input:0 input:1 leftAF:0 :0]

#below this we have only two outputs, the adaptive filter outputs


#if no SCNR-postfiltering, route BF output to output
#mha.noPF.out = [:2 :3]
