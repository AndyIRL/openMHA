# Binaural coherence filter
# chAlgo = [1,2];
nchannels_in = 2
fragsize = 96
srate = 48000
mhalib = overlapadd
iolib = MHAIOFile
sleep = 0
cmd = nop
instance = mha
port = 0
mha.plugin_name = mhachain:ch
mha.fftlen = 384
mha.wnd.type = hanning
mha.wnd.user = []
mha.wnd.len = 192
mha.wnd.pos = 0.5
mha.wnd.exp = 1
mha.zerownd.type = rect
mha.zerownd.user = []
mha.ch.use_profiling = no
mha.ch.algos = [smoothgains_bridge:sg]
mha.ch.sg.plugin_name = coherence:coh
mha.ch.sg.mode = linear_phase
mha.ch.sg.irswnd.type = hanning
mha.ch.sg.irswnd.user = []
mha.ch.sg.epsilon = 1.00000005e-18
mha.ch.sg.coh.unit = Oct/3
mha.ch.sg.coh.f = [-6 -4 -3 -2 -1 0 1 2 3 4 5 6]
mha.ch.sg.coh.fscale = linear
mha.ch.sg.coh.ovltype = rect
mha.ch.sg.coh.plateau = 0
mha.ch.sg.coh.ftype = center
mha.ch.sg.coh.normalize = no
mha.ch.sg.coh.fail_on_nonmonotonic = yes
mha.ch.sg.coh.fail_on_unique_bins = yes
mha.ch.sg.coh.tau = [0.04]
mha.ch.sg.coh.alpha = [0 1 1 1 1 1 1 1 1 1 1 1]
mha.ch.sg.coh.limit = -30
mha.ch.sg.coh.mapping = [0 1]
mha.ch.sg.coh.average = spec
mha.ch.sg.coh.invert = no
mha.ch.sg.coh.ltgcomp = no
mha.ch.sg.coh.ltgtau = [1]
mha.ch.sg.coh.staticgain = [0]
mha.ch.sg.coh.delay = 0
io.output_sample_format = input
io.startsample = 0
io.length = 0
io.strict_channel_match = yes
io.strict_srate_match = yes
