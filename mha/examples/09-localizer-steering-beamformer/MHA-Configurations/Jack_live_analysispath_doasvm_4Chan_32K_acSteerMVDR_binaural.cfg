srate = 32000
nchannels_in = 4
fragsize = 160

# Audio IO library to use.
iolib = MHAIOJack
io.con_in = [system:capture_5 system:capture_6 system:capture_7 system:capture_8]
io.con_out = [system:playback_7 system:playback_8]

mhalib = mhachain
mha.algos = [analysispath:doapath overlapadd:OA]

mha.doapath.plugname = resampling
mha.doapath.fragsize = 320
mha.doapath.acvars = [pool pool_max]

mha.doapath.plug.plugin_name = mhachain:doachain

mha.doapath.plug.srate = 16000
mha.doapath.plug.fragsize = 160

mha.doapath.plug.doachain.algos = [gain route:doa_in route:doa_1_2 doasvm_feature_extraction:gcc_1_2 route:doa_1_3 doasvm_feature_extraction:gcc_1_3 route:doa_1_4 doasvm_feature_extraction:gcc_1_4 route:doa_2_3 doasvm_feature_extraction:gcc_2_3 route:doa_2_4 doasvm_feature_extraction:gcc_2_4 route:doa_3_4 doasvm_feature_extraction:gcc_3_4 acConcat_wave:concat doasvm_classification:svm acPooling_wave:pool acsave:doasvm_save acmon:doasvm_mon route:all]

# mha.doapath.plug.doachain.gain.gains = [6 6 6 6]

# route only four channels to the DOA estimation and save all the channels for future filtering
mha.doapath.plug.doachain.doa_in.out = [:0 :1 :2 :3]
mha.doapath.plug.doachain.doa_in.ac = [:0 :1 :2 :3]

# configure doasvm_feature_extraction plugins, which compute the GCC matrices
mha.doapath.plug.doachain.gcc_1_2.fftlen = 160
mha.doapath.plug.doachain.gcc_1_2.nupsample = 4
mha.doapath.plug.doachain.gcc_1_2.max_lag = 20
mha.doapath.plug.doachain.gcc_1_2.vGCC_name = vGCC_ac_1

mha.doapath.plug.doachain.gcc_1_3.fftlen = 160
mha.doapath.plug.doachain.gcc_1_3.nupsample = 4
mha.doapath.plug.doachain.gcc_1_3.max_lag = 2
mha.doapath.plug.doachain.gcc_1_3.vGCC_name = vGCC_ac_2

mha.doapath.plug.doachain.gcc_1_4.fftlen = 160
mha.doapath.plug.doachain.gcc_1_4.nupsample = 4
mha.doapath.plug.doachain.gcc_1_4.max_lag = 20
mha.doapath.plug.doachain.gcc_1_4.vGCC_name = vGCC_ac_3

mha.doapath.plug.doachain.gcc_2_3.fftlen = 160
mha.doapath.plug.doachain.gcc_2_3.nupsample = 4
mha.doapath.plug.doachain.gcc_2_3.max_lag = 20
mha.doapath.plug.doachain.gcc_2_3.vGCC_name = vGCC_ac_4

mha.doapath.plug.doachain.gcc_2_4.fftlen = 160
mha.doapath.plug.doachain.gcc_2_4.nupsample = 4
mha.doapath.plug.doachain.gcc_2_4.max_lag = 2
mha.doapath.plug.doachain.gcc_2_4.vGCC_name = vGCC_ac_5

mha.doapath.plug.doachain.gcc_3_4.fftlen = 160
mha.doapath.plug.doachain.gcc_3_4.nupsample = 4
mha.doapath.plug.doachain.gcc_3_4.max_lag = 20
mha.doapath.plug.doachain.gcc_3_4.vGCC_name = vGCC_ac_6





# configure route plugins for redirecting the corresponding channel pair to the doasvm_feature_extraction plugins
mha.doapath.plug.doachain.doa_1_2.out = [:1 :0] 				# channels 2, 1
mha.doapath.plug.doachain.doa_1_2.ac = [:2 :3]	 				# channels 3, 4

mha.doapath.plug.doachain.doa_1_3.out = [doa_1_2:0 :1]				# channels 3, 1
mha.doapath.plug.doachain.doa_1_3.ac = [:0 doa_1_2:1]				# channels 2, 4

mha.doapath.plug.doachain.doa_1_4.out = [doa_1_3:1 :1]				# channels 4, 1
mha.doapath.plug.doachain.doa_1_4.ac = [doa_1_3:0 :0]				# channels 2, 3

mha.doapath.plug.doachain.doa_2_3.out = [doa_1_4:1 doa_1_4:0]			# channels 3, 2
mha.doapath.plug.doachain.doa_2_3.ac = [:1 :0]					# channels 1, 4

mha.doapath.plug.doachain.doa_2_4.out = [doa_2_3:1 :1]				# channels 4, 2
mha.doapath.plug.doachain.doa_2_4.ac = [doa_2_3:0 :0]				# channels 1, 3

mha.doapath.plug.doachain.doa_3_4.out = [:0 doa_2_4:1]				# channels 4, 3
mha.doapath.plug.doachain.doa_3_4.ac = [doa_2_4:0 :1]				# channels 1, 2




# concatenate all pairwise gcc vectors into one big vector
mha.doapath.plug.doachain.concat.num_AC = 6
mha.doapath.plug.doachain.concat.prefix_names_AC = vGCC_ac
mha.doapath.plug.doachain.concat.samples_AC = [161 17 161 161 17 161]
mha.doapath.plug.doachain.concat.name_conAC = vGCC_con_ac

# configure doasvm_classification plugin by loading the SVM parameters
mha.doapath.plug.doachain.svm?read:../DOA-SVM/matrices_4channel_front-rear_bte.cfg
mha.doapath.plug.doachain.svm.vGCC_name = vGCC_con_ac




# configure acPooling_wave plugin for pooling the SVM estimations of the recent history
mha.doapath.plug.doachain.pool.p_name = p
mha.doapath.plug.doachain.pool.pool_name = pool
mha.doapath.plug.doachain.pool.max_pool_ind_name = pool_max
mha.doapath.plug.doachain.pool.numsamples = 73
mha.doapath.plug.doachain.pool.pooling_wndlen = 300
mha.doapath.plug.doachain.pool.pooling_type = mean
mha.doapath.plug.doachain.pool.upper_threshold = 0.1
mha.doapath.plug.doachain.pool.neighbourhood = 4
mha.doapath.plug.doachain.pool.alpha = 0


mha.doapath.plug.doachain.doasvm_save.name = ../Results/4ch_doasvm_acsave.mat
mha.doapath.plug.doachain.doasvm_save.fileformat = mat4
mha.doapath.plug.doachain.doasvm_save.reclen = 10
mha.doapath.plug.doachain.doasvm_save.vars = [p p_max pool pool_max vGCC_ac_1 vGCC_ac_2 vGCC_ac_3 vGCC_ac_4 vGCC_ac_5 vGCC_ac_6 vGCC_con_ac]



# merge all channels for signal processing
mha.doapath.plug.doachain.all.out = [doa_in:0 doa_in:1 doa_in:2 doa_in:3]


# configure OA node for steering beamformer filters
mha.OA.fftlen = 512
mha.OA.wnd.len = 320
mha.OA.zerownd.type = hanning
mha.OA.plugin_name = mhachain:bfChain

mha.OA.bfChain.algos = [route:left_in acSteer:mvdr steerbf:left route:right_in steerbf:right route:out]

mha.OA.bfChain.left_in.out = [:0 :1 :2 :3]
mha.OA.bfChain.left_in.ac = [:0 :1 :2 :3]

#configure steervec for the left reference microphone
mha.OA.bfChain.mvdr.steerFile = ../Filters/MVDR_iso_norm_bte_32KHz_4ch_lr_FFT512_-180-5-180.txt
mha.OA.bfChain.mvdr.nsteerchan = 584
mha.OA.bfChain.mvdr.acSteerName1 = acSteerLeft
mha.OA.bfChain.mvdr.acSteerName2 = acSteerRight
mha.OA.bfChain.mvdr.nrefmic = 2

#configure steerbf for the left reference microphone
mha.OA.bfChain.left.bf_src = acSteerLeft
#mha.OA.bfChain.left.angle_src = pool_max
mha.OA.bfChain.left.angle_ind = 24

# route the input signal to the beamformer with the right reference microphone
mha.OA.bfChain.right_in.out = [left_in:0 left_in:1 left_in:2 left_in:3]
mha.OA.bfChain.right_in.ac = [:0]

#configure steerbf for the right reference microphone
mha.OA.bfChain.right.bf_src = acSteerRight
#mha.OA.bfChain.right.angle_src = pool_max
mha.OA.bfChain.right.angle_ind = 24

# route the filter outputs of the left and right beamformers to the output
mha.OA.bfChain.out.out = [right_in:0 :0]
#mha.OA.bfChain.out.out = [doa_in:0 doa_in:1]

#run the configuration
cmd = start
#cmd=quit
